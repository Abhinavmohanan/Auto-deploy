version: "3"

services:
  web:
    container_name: web
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    ports:
      - 3000:3000
    depends_on:
      - deployment_server
      - log_server
      - reverse_proxy
      - redis
      - db
      - supertokens
    env_file:
      - ./apps/web/.env

  deployment_server:
    container_name: deployment_server
    build:
      context: .
      dockerfile: ./apps/deployment-server/Dockerfile
    restart: always
    ports:
      - 3002:3002
    depends_on:
      - reverse_proxy
      - redis
      - db
      - supertokens
    environment:
      - ST_CONNECTION_URI=${SUPERTOKEN_CONNECTION_URI}
      - ST_API_KEY=${SUPERTOKEN_API_KEY}
    env_file:
      - ./apps/deployment-server/.env
    networks:
      - app_network

  log_server:
    container_name: log_server
    build:
      context: .
      dockerfile: ./apps/log-server/Dockerfile
    restart: always
    ports:
      - 3003:3003
    depends_on:
      - redis
    env_file:
      - ./apps/log-server/.env
    networks:
      - app_network

  reverse_proxy:
    container_name: reverse_proxy
    build:
      context: .
      dockerfile: ./apps/reverse-proxy/Dockerfile
    restart: always
    depends_on:
      - db
    ports:
      - 3001:3001
    env_file:
      - ./apps/reverse-proxy/.env

  redis:
    container_name: redis
    image: redis:latest
    command: ["redis-server", "--bind", "redis", "--port", "6379"]
    networks:
      - app_network

  db:
    container_name: db
    image: "postgres:latest"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  supertokens:
    container_name: supertokens
    image: registry.supertokens.io/supertokens/supertokens-postgresql:7.0
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      API_KEYS: ${SUPERTOKEN_API_KEY}
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
